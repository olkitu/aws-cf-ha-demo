AWSTemplateFormatVersion: '2010-09-09'
Description: Create LoadBalancer, AutoScaleGroup and RDS

Parameters:
  VPCID:
    Type: String
    Description: Value of VPCId something like vpc-...
  VPCCIDR:
    Type: String
    Description: CIDR of VPC network
  PublicSubnet1ID:
    Type: String
    Description: Public Subnet 1
  PublicSubnet2ID:
    Type: String
    Description: Public Subnet 2
  PrivateSubnet1AID:
    Type: String
    Description: Private Subnet 1
  PrivateSubnet2AID:
    Type: String
    Description: Private Subnet 2
  DBPassword:
    NoEcho: 'true'
    Type: String
    Description: Password MySQL database access
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DeployBucket:
    Type: String
    Description: S3 Bucket for deployment use

Mappings: 
  RegionMap: 
    us-east-1: 
      HVM64: "ami-0022f774911c1d690"
    us-west-1: 
      HVM64: "ami-02541b8af977f6cdd"
    eu-west-1: 
      HVM64: "ami-0c1bc246476a5572b"
    eu-central-1:
      HVM64: "ami-09439f09c55136ecf"

Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP in
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        Description: Allow HTTP in
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      VpcId: !Ref VPCID
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP & SSH in
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        Description: Allow HTTP in
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      VpcId: !Ref VPCID
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP & SSH in
      SecurityGroupIngress:
      - CidrIp: !Ref VPCCIDR
        Description: Allow RDS from EC2
        FromPort: 3306
        ToPort: 3306
        IpProtocol: tcp  
      VpcId: !Ref VPCID
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
      Tags:
      - Key: Name
        Value: loadbalancer
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Matcher:
        HttpCode: '200'
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VPCID
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role to allow access to EC2 via Session Manager
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: "root"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ssm:UpdateInstanceInformation
            - ssmmessages:CreateControlChannel
            - ssmmessages:CreateDataChannel
            - ssmmessages:OpenControlChannel
            - ssmmessages:OpenDataChannel
            Resource: '*'
          - Effect: Allow
            Action: s3:GetEncryptionConfiguration
            Resource: '*'
          - Effect: Allow
            Action: kms:Decrypt
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:ListBucket
            Resource: !Sub arn:aws:s3:::${DeployBucket}
          - Effect: Allow
            Action:
            - s3:ListObject
            - s3:GetObject
            Resource:
            - !Sub arn:aws:s3:::${DeployBucket}/*
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap
      - RegionMap
      - !Ref 'AWS::Region'
      - HVM64
      InstanceType: t2.micro
      SecurityGroups:
      - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64:
          !Sub | 
            #!/bin/bash -x
            yum update -y
            yum install -y aws-cfn-bootstrap httpd mariadb php
            systemctl enable httpd
            systemctl start httpd
            echo "[client]" > ~/.my.cnf
            echo "user=admin" >> ~/.my.cnf
            echo "password=${DBPassword}" >> ~/.my.cnf
            aws s3 sync s3://${DeployBucket}/code/ /var/www/html
            aws s3 sync s3://${DeployBucket}/sql/test-db.sql /tmp/test-db.sql
            sed -i "s|AWS_INSTANCEAZ|$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)|g" /var/www/html/index.php
            sed -i "s|AWS_INSTANCEID|$(curl -s http://169.254.169.254/latest/meta-data/instance-id)|g" /var/www/html/index.php
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --configsets default --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScaleGroup --region ${AWS::Region}
  AutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'
      LaunchConfigurationName: !Ref LaunchConfig
      VPCZoneIdentifier:
      - !Ref PrivateSubnet1AID
      - !Ref PrivateSubnet2AID
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value: cf-ha-demo-app-instance
      - Key: ENV
        PropagateAtLaunch: true
        Value: fis
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      DBClusterParameterGroupName: !Ref RDSDBClusterParameterGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: aurora
  RDSInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: db.t2.micro
      AllocatedStorage: '10'
      Engine: MySQL
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: true
      VPCSecurityGroups: 
      - !Ref RDSSecurityGroup
      Tags:
      - Key: ENV
        Value: fis
  RDSInstance2:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: db.t2.micro
      AllocatedStorage: '10'
      Engine: MySQL
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: true
      VPCSecurityGroups:
      - !Ref RDSSecurityGroup
      Tags:
      - Key: ENV
        Value: fis
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: SubnetGroup
      SubnetIds:
      - !Ref PrivateSubnet1AID
      - !Ref PrivateSubnet2AID
  RDSDBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Aurora Cluster Parameter Group
      Family: aurora5.6
      Parameters:
        time_zone: 'UTC'
      

Outputs:
  ApplicationLoadBalancerDNSName:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerDNSName
  RDSClusterId:
    Value: !Ref RDSCluster
    Export:
      Name: !Sub ${AWS::StackName}-RDSClusterId
  RDSClusterAddress:
    Value: !GetAtt RDSCluster.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-RDSClusterAddress
  RDSClusterPort:
    Value: !GetAtt RDSCluster.Endpoint.Port
    Export:
      Name: !Sub ${AWS::StackName}-RDSClusterPort
  RDSClusterReadAddress:
    Value: !GetAtt RDSCluster.ReadEndpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-RDSClusterReadAddress